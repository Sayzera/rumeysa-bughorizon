import { createContext, useContext, useState, useEffect } from 'react';

const VulnerabilityContext = createContext();

export const VulnerabilityProvider = ({ children }) => {
  // Initialize state from localStorage or default values
  const [vulnerabilityCounts, setVulnerabilityCounts] = useState(() => {
    const savedCounts = localStorage.getItem('vulnerabilityCounts');
    return savedCounts ? JSON.parse(savedCounts) : {
      xss: 0,
      sqlInjection: 0,
      brokenAuth: 0,
      securityMisconfig: 0,
      csrf: 0,
      loggingDeficiencies: 0,
      ssrf: 0,
      csp: 0
    };
  });

  // Save to localStorage whenever counts change
  useEffect(() => {
    localStorage.setItem('vulnerabilityCounts', JSON.stringify(vulnerabilityCounts));
  }, [vulnerabilityCounts]);

  const incrementVulnerabilityCount = (vulnerabilityType) => {
    setVulnerabilityCounts(prevCounts => ({
      ...prevCounts,
      [vulnerabilityType]: (prevCounts[vulnerabilityType] || 0) + 1
    }));
  };

  const resetVulnerabilityCounts = () => {
    setVulnerabilityCounts({
      xss: 0,
      sqlInjection: 0,
      brokenAuth: 0,
      securityMisconfig: 0,
      csrf: 0,
      loggingDeficiencies: 0,
      ssrf: 0,
      csp: 0
    });
  };

  return (
    <VulnerabilityContext.Provider value={{ vulnerabilityCounts, incrementVulnerabilityCount, resetVulnerabilityCounts }}>
      {children}
    </VulnerabilityContext.Provider>
  );
};

export const useVulnerability = () => {
  const context = useContext(VulnerabilityContext);
  if (!context) {
    throw new Error('useVulnerability must be used within a VulnerabilityProvider');
  }
  return context;
}; 